{
  "version": 3,
  "sources": ["../../../../../node_modules/wicg-inert/dist/inert.esm.js"],
  "sourcesContent": ["var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * This work is licensed under the W3C Software and Document License\n * (http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document).\n */\n\n(function () {\n  // Return early if we're not running inside of the browser.\n  if (typeof window === 'undefined') {\n    return;\n  }\n\n  // Convenience function for converting NodeLists.\n  /** @type {typeof Array.prototype.slice} */\n  var slice = Array.prototype.slice;\n\n  /**\n   * IE has a non-standard name for \"matches\".\n   * @type {typeof Element.prototype.matches}\n   */\n  var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;\n\n  /** @type {string} */\n  var _focusableElementsString = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'details', 'summary', 'iframe', 'object', 'embed', '[contenteditable]'].join(',');\n\n  /**\n   * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`\n   * attribute.\n   *\n   * Its main functions are:\n   *\n   * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the\n   *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering\n   *   each focusable node in the subtree with the singleton `InertManager` which manages all known\n   *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`\n   *   instance exists for each focusable node which has at least one inert root as an ancestor.\n   *\n   * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`\n   *   attribute is removed from the root node). This is handled in the destructor, which calls the\n   *   `deregister` method on `InertManager` for each managed inert node.\n   */\n\n  var InertRoot = function () {\n    /**\n     * @param {!HTMLElement} rootElement The HTMLElement at the root of the inert subtree.\n     * @param {!InertManager} inertManager The global singleton InertManager object.\n     */\n    function InertRoot(rootElement, inertManager) {\n      _classCallCheck(this, InertRoot);\n\n      /** @type {!InertManager} */\n      this._inertManager = inertManager;\n\n      /** @type {!HTMLElement} */\n      this._rootElement = rootElement;\n\n      /**\n       * @type {!Set<!InertNode>}\n       * All managed focusable nodes in this InertRoot's subtree.\n       */\n      this._managedNodes = new Set();\n\n      // Make the subtree hidden from assistive technology\n      if (this._rootElement.hasAttribute('aria-hidden')) {\n        /** @type {?string} */\n        this._savedAriaHidden = this._rootElement.getAttribute('aria-hidden');\n      } else {\n        this._savedAriaHidden = null;\n      }\n      this._rootElement.setAttribute('aria-hidden', 'true');\n\n      // Make all focusable elements in the subtree unfocusable and add them to _managedNodes\n      this._makeSubtreeUnfocusable(this._rootElement);\n\n      // Watch for:\n      // - any additions in the subtree: make them unfocusable too\n      // - any removals from the subtree: remove them from this inert root's managed nodes\n      // - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable\n      //   element, make that node a managed node.\n      this._observer = new MutationObserver(this._onMutation.bind(this));\n      this._observer.observe(this._rootElement, { attributes: true, childList: true, subtree: true });\n    }\n\n    /**\n     * Call this whenever this object is about to become obsolete.  This unwinds all of the state\n     * stored in this object and updates the state of all of the managed nodes.\n     */\n\n\n    _createClass(InertRoot, [{\n      key: 'destructor',\n      value: function destructor() {\n        this._observer.disconnect();\n\n        if (this._rootElement) {\n          if (this._savedAriaHidden !== null) {\n            this._rootElement.setAttribute('aria-hidden', this._savedAriaHidden);\n          } else {\n            this._rootElement.removeAttribute('aria-hidden');\n          }\n        }\n\n        this._managedNodes.forEach(function (inertNode) {\n          this._unmanageNode(inertNode.node);\n        }, this);\n\n        // Note we cast the nulls to the ANY type here because:\n        // 1) We want the class properties to be declared as non-null, or else we\n        //    need even more casts throughout this code. All bets are off if an\n        //    instance has been destroyed and a method is called.\n        // 2) We don't want to cast \"this\", because we want type-aware optimizations\n        //    to know which properties we're setting.\n        this._observer = /** @type {?} */null;\n        this._rootElement = /** @type {?} */null;\n        this._managedNodes = /** @type {?} */null;\n        this._inertManager = /** @type {?} */null;\n      }\n\n      /**\n       * @return {!Set<!InertNode>} A copy of this InertRoot's managed nodes set.\n       */\n\n    }, {\n      key: '_makeSubtreeUnfocusable',\n\n\n      /**\n       * @param {!Node} startNode\n       */\n      value: function _makeSubtreeUnfocusable(startNode) {\n        var _this2 = this;\n\n        composedTreeWalk(startNode, function (node) {\n          return _this2._visitNode(node);\n        });\n\n        var activeElement = document.activeElement;\n\n        if (!document.body.contains(startNode)) {\n          // startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.\n          var node = startNode;\n          /** @type {!ShadowRoot|undefined} */\n          var root = undefined;\n          while (node) {\n            if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n              root = /** @type {!ShadowRoot} */node;\n              break;\n            }\n            node = node.parentNode;\n          }\n          if (root) {\n            activeElement = root.activeElement;\n          }\n        }\n        if (startNode.contains(activeElement)) {\n          activeElement.blur();\n          // In IE11, if an element is already focused, and then set to tabindex=-1\n          // calling blur() will not actually move the focus.\n          // To work around this we call focus() on the body instead.\n          if (activeElement === document.activeElement) {\n            document.body.focus();\n          }\n        }\n      }\n\n      /**\n       * @param {!Node} node\n       */\n\n    }, {\n      key: '_visitNode',\n      value: function _visitNode(node) {\n        if (node.nodeType !== Node.ELEMENT_NODE) {\n          return;\n        }\n        var element = /** @type {!HTMLElement} */node;\n\n        // If a descendant inert root becomes un-inert, its descendants will still be inert because of\n        // this inert root, so all of its managed nodes need to be adopted by this InertRoot.\n        if (element !== this._rootElement && element.hasAttribute('inert')) {\n          this._adoptInertRoot(element);\n        }\n\n        if (matches.call(element, _focusableElementsString) || element.hasAttribute('tabindex')) {\n          this._manageNode(element);\n        }\n      }\n\n      /**\n       * Register the given node with this InertRoot and with InertManager.\n       * @param {!Node} node\n       */\n\n    }, {\n      key: '_manageNode',\n      value: function _manageNode(node) {\n        var inertNode = this._inertManager.register(node, this);\n        this._managedNodes.add(inertNode);\n      }\n\n      /**\n       * Unregister the given node with this InertRoot and with InertManager.\n       * @param {!Node} node\n       */\n\n    }, {\n      key: '_unmanageNode',\n      value: function _unmanageNode(node) {\n        var inertNode = this._inertManager.deregister(node, this);\n        if (inertNode) {\n          this._managedNodes['delete'](inertNode);\n        }\n      }\n\n      /**\n       * Unregister the entire subtree starting at `startNode`.\n       * @param {!Node} startNode\n       */\n\n    }, {\n      key: '_unmanageSubtree',\n      value: function _unmanageSubtree(startNode) {\n        var _this3 = this;\n\n        composedTreeWalk(startNode, function (node) {\n          return _this3._unmanageNode(node);\n        });\n      }\n\n      /**\n       * If a descendant node is found with an `inert` attribute, adopt its managed nodes.\n       * @param {!HTMLElement} node\n       */\n\n    }, {\n      key: '_adoptInertRoot',\n      value: function _adoptInertRoot(node) {\n        var inertSubroot = this._inertManager.getInertRoot(node);\n\n        // During initialisation this inert root may not have been registered yet,\n        // so register it now if need be.\n        if (!inertSubroot) {\n          this._inertManager.setInert(node, true);\n          inertSubroot = this._inertManager.getInertRoot(node);\n        }\n\n        inertSubroot.managedNodes.forEach(function (savedInertNode) {\n          this._manageNode(savedInertNode.node);\n        }, this);\n      }\n\n      /**\n       * Callback used when mutation observer detects subtree additions, removals, or attribute changes.\n       * @param {!Array<!MutationRecord>} records\n       * @param {!MutationObserver} self\n       */\n\n    }, {\n      key: '_onMutation',\n      value: function _onMutation(records, self) {\n        records.forEach(function (record) {\n          var target = /** @type {!HTMLElement} */record.target;\n          if (record.type === 'childList') {\n            // Manage added nodes\n            slice.call(record.addedNodes).forEach(function (node) {\n              this._makeSubtreeUnfocusable(node);\n            }, this);\n\n            // Un-manage removed nodes\n            slice.call(record.removedNodes).forEach(function (node) {\n              this._unmanageSubtree(node);\n            }, this);\n          } else if (record.type === 'attributes') {\n            if (record.attributeName === 'tabindex') {\n              // Re-initialise inert node if tabindex changes\n              this._manageNode(target);\n            } else if (target !== this._rootElement && record.attributeName === 'inert' && target.hasAttribute('inert')) {\n              // If a new inert root is added, adopt its managed nodes and make sure it knows about the\n              // already managed nodes from this inert subroot.\n              this._adoptInertRoot(target);\n              var inertSubroot = this._inertManager.getInertRoot(target);\n              this._managedNodes.forEach(function (managedNode) {\n                if (target.contains(managedNode.node)) {\n                  inertSubroot._manageNode(managedNode.node);\n                }\n              });\n            }\n          }\n        }, this);\n      }\n    }, {\n      key: 'managedNodes',\n      get: function get() {\n        return new Set(this._managedNodes);\n      }\n\n      /** @return {boolean} */\n\n    }, {\n      key: 'hasSavedAriaHidden',\n      get: function get() {\n        return this._savedAriaHidden !== null;\n      }\n\n      /** @param {?string} ariaHidden */\n\n    }, {\n      key: 'savedAriaHidden',\n      set: function set(ariaHidden) {\n        this._savedAriaHidden = ariaHidden;\n      }\n\n      /** @return {?string} */\n      ,\n      get: function get() {\n        return this._savedAriaHidden;\n      }\n    }]);\n\n    return InertRoot;\n  }();\n\n  /**\n   * `InertNode` initialises and manages a single inert node.\n   * A node is inert if it is a descendant of one or more inert root elements.\n   *\n   * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and\n   * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element\n   * is intrinsically focusable or not.\n   *\n   * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an\n   * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the\n   * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s\n   * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,\n   * or removes the `tabindex` attribute if the element is intrinsically focusable.\n   */\n\n\n  var InertNode = function () {\n    /**\n     * @param {!Node} node A focusable element to be made inert.\n     * @param {!InertRoot} inertRoot The inert root element associated with this inert node.\n     */\n    function InertNode(node, inertRoot) {\n      _classCallCheck(this, InertNode);\n\n      /** @type {!Node} */\n      this._node = node;\n\n      /** @type {boolean} */\n      this._overrodeFocusMethod = false;\n\n      /**\n       * @type {!Set<!InertRoot>} The set of descendant inert roots.\n       *    If and only if this set becomes empty, this node is no longer inert.\n       */\n      this._inertRoots = new Set([inertRoot]);\n\n      /** @type {?number} */\n      this._savedTabIndex = null;\n\n      /** @type {boolean} */\n      this._destroyed = false;\n\n      // Save any prior tabindex info and make this node untabbable\n      this.ensureUntabbable();\n    }\n\n    /**\n     * Call this whenever this object is about to become obsolete.\n     * This makes the managed node focusable again and deletes all of the previously stored state.\n     */\n\n\n    _createClass(InertNode, [{\n      key: 'destructor',\n      value: function destructor() {\n        this._throwIfDestroyed();\n\n        if (this._node && this._node.nodeType === Node.ELEMENT_NODE) {\n          var element = /** @type {!HTMLElement} */this._node;\n          if (this._savedTabIndex !== null) {\n            element.setAttribute('tabindex', this._savedTabIndex);\n          } else {\n            element.removeAttribute('tabindex');\n          }\n\n          // Use `delete` to restore native focus method.\n          if (this._overrodeFocusMethod) {\n            delete element.focus;\n          }\n        }\n\n        // See note in InertRoot.destructor for why we cast these nulls to ANY.\n        this._node = /** @type {?} */null;\n        this._inertRoots = /** @type {?} */null;\n        this._destroyed = true;\n      }\n\n      /**\n       * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.\n       * If the object has been destroyed, any attempt to access it will cause an exception.\n       */\n\n    }, {\n      key: '_throwIfDestroyed',\n\n\n      /**\n       * Throw if user tries to access destroyed InertNode.\n       */\n      value: function _throwIfDestroyed() {\n        if (this.destroyed) {\n          throw new Error('Trying to access destroyed InertNode');\n        }\n      }\n\n      /** @return {boolean} */\n\n    }, {\n      key: 'ensureUntabbable',\n\n\n      /** Save the existing tabindex value and make the node untabbable and unfocusable */\n      value: function ensureUntabbable() {\n        if (this.node.nodeType !== Node.ELEMENT_NODE) {\n          return;\n        }\n        var element = /** @type {!HTMLElement} */this.node;\n        if (matches.call(element, _focusableElementsString)) {\n          if ( /** @type {!HTMLElement} */element.tabIndex === -1 && this.hasSavedTabIndex) {\n            return;\n          }\n\n          if (element.hasAttribute('tabindex')) {\n            this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;\n          }\n          element.setAttribute('tabindex', '-1');\n          if (element.nodeType === Node.ELEMENT_NODE) {\n            element.focus = function () {};\n            this._overrodeFocusMethod = true;\n          }\n        } else if (element.hasAttribute('tabindex')) {\n          this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;\n          element.removeAttribute('tabindex');\n        }\n      }\n\n      /**\n       * Add another inert root to this inert node's set of managing inert roots.\n       * @param {!InertRoot} inertRoot\n       */\n\n    }, {\n      key: 'addInertRoot',\n      value: function addInertRoot(inertRoot) {\n        this._throwIfDestroyed();\n        this._inertRoots.add(inertRoot);\n      }\n\n      /**\n       * Remove the given inert root from this inert node's set of managing inert roots.\n       * If the set of managing inert roots becomes empty, this node is no longer inert,\n       * so the object should be destroyed.\n       * @param {!InertRoot} inertRoot\n       */\n\n    }, {\n      key: 'removeInertRoot',\n      value: function removeInertRoot(inertRoot) {\n        this._throwIfDestroyed();\n        this._inertRoots['delete'](inertRoot);\n        if (this._inertRoots.size === 0) {\n          this.destructor();\n        }\n      }\n    }, {\n      key: 'destroyed',\n      get: function get() {\n        return (/** @type {!InertNode} */this._destroyed\n        );\n      }\n    }, {\n      key: 'hasSavedTabIndex',\n      get: function get() {\n        return this._savedTabIndex !== null;\n      }\n\n      /** @return {!Node} */\n\n    }, {\n      key: 'node',\n      get: function get() {\n        this._throwIfDestroyed();\n        return this._node;\n      }\n\n      /** @param {?number} tabIndex */\n\n    }, {\n      key: 'savedTabIndex',\n      set: function set(tabIndex) {\n        this._throwIfDestroyed();\n        this._savedTabIndex = tabIndex;\n      }\n\n      /** @return {?number} */\n      ,\n      get: function get() {\n        this._throwIfDestroyed();\n        return this._savedTabIndex;\n      }\n    }]);\n\n    return InertNode;\n  }();\n\n  /**\n   * InertManager is a per-document singleton object which manages all inert roots and nodes.\n   *\n   * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`\n   * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.\n   * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant\n   * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance\n   * is created for each such node, via the `_managedNodes` map.\n   */\n\n\n  var InertManager = function () {\n    /**\n     * @param {!Document} document\n     */\n    function InertManager(document) {\n      _classCallCheck(this, InertManager);\n\n      if (!document) {\n        throw new Error('Missing required argument; InertManager needs to wrap a document.');\n      }\n\n      /** @type {!Document} */\n      this._document = document;\n\n      /**\n       * All managed nodes known to this InertManager. In a map to allow looking up by Node.\n       * @type {!Map<!Node, !InertNode>}\n       */\n      this._managedNodes = new Map();\n\n      /**\n       * All inert roots known to this InertManager. In a map to allow looking up by Node.\n       * @type {!Map<!Node, !InertRoot>}\n       */\n      this._inertRoots = new Map();\n\n      /**\n       * Observer for mutations on `document.body`.\n       * @type {!MutationObserver}\n       */\n      this._observer = new MutationObserver(this._watchForInert.bind(this));\n\n      // Add inert style.\n      addInertStyle(document.head || document.body || document.documentElement);\n\n      // Wait for document to be loaded.\n      if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', this._onDocumentLoaded.bind(this));\n      } else {\n        this._onDocumentLoaded();\n      }\n    }\n\n    /**\n     * Set whether the given element should be an inert root or not.\n     * @param {!HTMLElement} root\n     * @param {boolean} inert\n     */\n\n\n    _createClass(InertManager, [{\n      key: 'setInert',\n      value: function setInert(root, inert) {\n        if (inert) {\n          if (this._inertRoots.has(root)) {\n            // element is already inert\n            return;\n          }\n\n          var inertRoot = new InertRoot(root, this);\n          root.setAttribute('inert', '');\n          this._inertRoots.set(root, inertRoot);\n          // If not contained in the document, it must be in a shadowRoot.\n          // Ensure inert styles are added there.\n          if (!this._document.body.contains(root)) {\n            var parent = root.parentNode;\n            while (parent) {\n              if (parent.nodeType === 11) {\n                addInertStyle(parent);\n              }\n              parent = parent.parentNode;\n            }\n          }\n        } else {\n          if (!this._inertRoots.has(root)) {\n            // element is already non-inert\n            return;\n          }\n\n          var _inertRoot = this._inertRoots.get(root);\n          _inertRoot.destructor();\n          this._inertRoots['delete'](root);\n          root.removeAttribute('inert');\n        }\n      }\n\n      /**\n       * Get the InertRoot object corresponding to the given inert root element, if any.\n       * @param {!Node} element\n       * @return {!InertRoot|undefined}\n       */\n\n    }, {\n      key: 'getInertRoot',\n      value: function getInertRoot(element) {\n        return this._inertRoots.get(element);\n      }\n\n      /**\n       * Register the given InertRoot as managing the given node.\n       * In the case where the node has a previously existing inert root, this inert root will\n       * be added to its set of inert roots.\n       * @param {!Node} node\n       * @param {!InertRoot} inertRoot\n       * @return {!InertNode} inertNode\n       */\n\n    }, {\n      key: 'register',\n      value: function register(node, inertRoot) {\n        var inertNode = this._managedNodes.get(node);\n        if (inertNode !== undefined) {\n          // node was already in an inert subtree\n          inertNode.addInertRoot(inertRoot);\n        } else {\n          inertNode = new InertNode(node, inertRoot);\n        }\n\n        this._managedNodes.set(node, inertNode);\n\n        return inertNode;\n      }\n\n      /**\n       * De-register the given InertRoot as managing the given inert node.\n       * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert\n       * node from the InertManager's set of managed nodes if it is destroyed.\n       * If the node is not currently managed, this is essentially a no-op.\n       * @param {!Node} node\n       * @param {!InertRoot} inertRoot\n       * @return {?InertNode} The potentially destroyed InertNode associated with this node, if any.\n       */\n\n    }, {\n      key: 'deregister',\n      value: function deregister(node, inertRoot) {\n        var inertNode = this._managedNodes.get(node);\n        if (!inertNode) {\n          return null;\n        }\n\n        inertNode.removeInertRoot(inertRoot);\n        if (inertNode.destroyed) {\n          this._managedNodes['delete'](node);\n        }\n\n        return inertNode;\n      }\n\n      /**\n       * Callback used when document has finished loading.\n       */\n\n    }, {\n      key: '_onDocumentLoaded',\n      value: function _onDocumentLoaded() {\n        // Find all inert roots in document and make them actually inert.\n        var inertElements = slice.call(this._document.querySelectorAll('[inert]'));\n        inertElements.forEach(function (inertElement) {\n          this.setInert(inertElement, true);\n        }, this);\n\n        // Comment this out to use programmatic API only.\n        this._observer.observe(this._document.body || this._document.documentElement, { attributes: true, subtree: true, childList: true });\n      }\n\n      /**\n       * Callback used when mutation observer detects attribute changes.\n       * @param {!Array<!MutationRecord>} records\n       * @param {!MutationObserver} self\n       */\n\n    }, {\n      key: '_watchForInert',\n      value: function _watchForInert(records, self) {\n        var _this = this;\n        records.forEach(function (record) {\n          switch (record.type) {\n            case 'childList':\n              slice.call(record.addedNodes).forEach(function (node) {\n                if (node.nodeType !== Node.ELEMENT_NODE) {\n                  return;\n                }\n                var inertElements = slice.call(node.querySelectorAll('[inert]'));\n                if (matches.call(node, '[inert]')) {\n                  inertElements.unshift(node);\n                }\n                inertElements.forEach(function (inertElement) {\n                  this.setInert(inertElement, true);\n                }, _this);\n              }, _this);\n              break;\n            case 'attributes':\n              if (record.attributeName !== 'inert') {\n                return;\n              }\n              var target = /** @type {!HTMLElement} */record.target;\n              var inert = target.hasAttribute('inert');\n              _this.setInert(target, inert);\n              break;\n          }\n        }, this);\n      }\n    }]);\n\n    return InertManager;\n  }();\n\n  /**\n   * Recursively walk the composed tree from |node|.\n   * @param {!Node} node\n   * @param {(function (!HTMLElement))=} callback Callback to be called for each element traversed,\n   *     before descending into child nodes.\n   * @param {?ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.\n   */\n\n\n  function composedTreeWalk(node, callback, shadowRootAncestor) {\n    if (node.nodeType == Node.ELEMENT_NODE) {\n      var element = /** @type {!HTMLElement} */node;\n      if (callback) {\n        callback(element);\n      }\n\n      // Descend into node:\n      // If it has a ShadowRoot, ignore all child elements - these will be picked\n      // up by the <content> or <shadow> elements. Descend straight into the\n      // ShadowRoot.\n      var shadowRoot = /** @type {!HTMLElement} */element.shadowRoot;\n      if (shadowRoot) {\n        composedTreeWalk(shadowRoot, callback, shadowRoot);\n        return;\n      }\n\n      // If it is a <content> element, descend into distributed elements - these\n      // are elements from outside the shadow root which are rendered inside the\n      // shadow DOM.\n      if (element.localName == 'content') {\n        var content = /** @type {!HTMLContentElement} */element;\n        // Verifies if ShadowDom v0 is supported.\n        var distributedNodes = content.getDistributedNodes ? content.getDistributedNodes() : [];\n        for (var i = 0; i < distributedNodes.length; i++) {\n          composedTreeWalk(distributedNodes[i], callback, shadowRootAncestor);\n        }\n        return;\n      }\n\n      // If it is a <slot> element, descend into assigned nodes - these\n      // are elements from outside the shadow root which are rendered inside the\n      // shadow DOM.\n      if (element.localName == 'slot') {\n        var slot = /** @type {!HTMLSlotElement} */element;\n        // Verify if ShadowDom v1 is supported.\n        var _distributedNodes = slot.assignedNodes ? slot.assignedNodes({ flatten: true }) : [];\n        for (var _i = 0; _i < _distributedNodes.length; _i++) {\n          composedTreeWalk(_distributedNodes[_i], callback, shadowRootAncestor);\n        }\n        return;\n      }\n    }\n\n    // If it is neither the parent of a ShadowRoot, a <content> element, a <slot>\n    // element, nor a <shadow> element recurse normally.\n    var child = node.firstChild;\n    while (child != null) {\n      composedTreeWalk(child, callback, shadowRootAncestor);\n      child = child.nextSibling;\n    }\n  }\n\n  /**\n   * Adds a style element to the node containing the inert specific styles\n   * @param {!Node} node\n   */\n  function addInertStyle(node) {\n    if (node.querySelector('style#inert-style, link#inert-style')) {\n      return;\n    }\n    var style = document.createElement('style');\n    style.setAttribute('id', 'inert-style');\n    style.textContent = '\\n' + '[inert] {\\n' + '  pointer-events: none;\\n' + '  cursor: default;\\n' + '}\\n' + '\\n' + '[inert], [inert] * {\\n' + '  -webkit-user-select: none;\\n' + '  -moz-user-select: none;\\n' + '  -ms-user-select: none;\\n' + '  user-select: none;\\n' + '}\\n';\n    node.appendChild(style);\n  }\n\n  if (!HTMLElement.prototype.hasOwnProperty('inert')) {\n    /** @type {!InertManager} */\n    var inertManager = new InertManager(document);\n\n    Object.defineProperty(HTMLElement.prototype, 'inert', {\n      enumerable: true,\n      /** @this {!HTMLElement} */\n      get: function get() {\n        return this.hasAttribute('inert');\n      },\n      /** @this {!HTMLElement} */\n      set: function set(inert) {\n        inertManager.setInert(this, inert);\n      }\n    });\n  }\n})();\n"],
  "mappings": "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",
  "names": ["InertRoot", "inertManager", "node", "InertNode", "InertManager", "document"]
}
